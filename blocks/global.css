@media (min-width: 300px) {
  .block, .pseudo-block {
    padding-top: 1rem;
  }
}
@media (min-width: 620px) {
  .block, .pseudo-block {
    padding-top: 1rem;
  }
}
@media (min-width: 768px) {
  .block, .pseudo-block {
    padding-top: 2rem;
  }
}
@media (min-width: 992px) {
  .block, .pseudo-block {
    padding-top: 2rem;
  }
}
@media (min-width: 1200px) {
  .block, .pseudo-block {
    padding-top: 3rem;
  }
}
@media (min-width: 1400px) {
  .block, .pseudo-block {
    padding-top: 3rem;
  }
}
@media (min-width: 300px) {
  .block, .pseudo-block {
    padding-bottom: 1rem;
  }
}
@media (min-width: 620px) {
  .block, .pseudo-block {
    padding-bottom: 1rem;
  }
}
@media (min-width: 768px) {
  .block, .pseudo-block {
    padding-bottom: 2rem;
  }
}
@media (min-width: 992px) {
  .block, .pseudo-block {
    padding-bottom: 2rem;
  }
}
@media (min-width: 1200px) {
  .block, .pseudo-block {
    padding-bottom: 3rem;
  }
}
@media (min-width: 1400px) {
  .block, .pseudo-block {
    padding-bottom: 3rem;
  }
}

.block > .row {
  justify-content: center;
}
.block--innerblock {
  padding-top: 0;
  padding-bottom: 0;
}
.block[class*=-background-color] .entry-content[class*=-background-color]:not(.has-transparent-background-color) {
  padding: 1rem;
}
.block[class*=-gradient-background] .entry-content {
  padding: 1rem;
}
.block.has-contained-background {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  display: flex;
  flex-wrap: wrap;
  margin: 0 auto;
}
@media (min-width: 300px) {
  .block.has-contained-background {
    max-width: 576px;
  }
}
@media (min-width: 620px) {
  .block.has-contained-background {
    max-width: 576px;
  }
}
@media (min-width: 768px) {
  .block.has-contained-background {
    max-width: 720px;
  }
}
@media (min-width: 992px) {
  .block.has-contained-background {
    max-width: 960px;
  }
}
@media (min-width: 1200px) {
  .block.has-contained-background {
    max-width: 1140px;
  }
}
@media (min-width: 1400px) {
  .block.has-contained-background {
    max-width: 1280px;
  }
}
.block .entry-content {
  box-sizing: border-box;
}

.pseudo-block--404 {
  text-align: center;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
